From e3c73f69f98fb96bbcfefc32ebb5f91ceba52314 Mon Sep 17 00:00:00 2001
From: Jeongseok Lee <jeongseok@meta.com>
Date: Sat, 20 Sep 2025 06:10:10 -0700
Subject: [PATCH 5/5] Import Optional in __init__.py for Python 3.14
 compatibility

---
 drjit/__init__.py | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/drjit/__init__.py b/drjit/__init__.py
index 8bb6dc1e..ecb11256 100644
--- a/drjit/__init__.py
+++ b/drjit/__init__.py
@@ -1,5 +1,38 @@
 from . import detail
 
+# Python 3.14 evaluates annotations at access time; names must be resolvable.
+from typing import Optional, Callable, Any, TypeVar
+
+# --- Begin: 3.14 annotation compatibility shim ---
+import sys
+try:
+    import builtins as _builtins
+    import typing as _typing
+
+    if sys.version_info >= (3, 14):
+        # Make common typing names visible even when annotations are evaluated
+        # in a non-module globals dict (as happens with annotationlib/__annotate__).
+        for _name in ("Optional", "Callable", "Any"):
+            if not hasattr(_builtins, _name):
+                setattr(_builtins, _name, getattr(_typing, _name))
+
+        # Define the TypeVar(s) actually used in annotations.
+        # Many decorators use F to mean "same callable type".
+        try:
+            F  # noqa: F821
+        except NameError:
+            F = TypeVar("F", bound=Callable[..., Any])  # module-level
+        if not hasattr(_builtins, "F"):
+            setattr(_builtins, "F", F)  # seed for non-module eval contexts
+
+        # If you also use ParamSpec in annotations, seed P as well.
+        if hasattr(_typing, "ParamSpec") and not hasattr(_builtins, "P"):
+            setattr(_builtins, "P", _typing.ParamSpec("P"))
+except Exception:
+    # Best-effort only; if anything here fails, we fall back gracefully.
+    pass
+# --- End: 3.14 annotation compatibility shim ---    
+
 with detail.scoped_rtld_deepbind():
     try:
         from . import _drjit_ext as _drjit_ext
-- 
2.51.0

